version: '3.9'

services:
  server:
    restart: always
    image: ugc-api-codereview
    build:
      context: ../../.
      dockerfile: Dockerfile
    env_file:
      - $ENV
    environment:
      - REDIS_OM_URL=${NUGC_REDIS_OM_URL}
      - NUGC_USE_STUBS=1
    expose:
      - $NUGC_SERVER_PORT
    volumes:
      - ./../../src:/app/src
      - .:/app/tests/functional
    command: >
      sh -c "cd /app/src
      && gunicorn --reload --worker-class aiohttp.worker.GunicornUVLoopWebWorker --workers 2 --bind 0.0.0.0:$NUGC_SERVER_PORT ugc.main:create_app"
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ugc_api.rule=Host(`api-ugc.localhost`,`traefik`)"
      - "traefik.http.routers.ugc_api.entrypoints=ugc"

  mongodb:
    image: mongo:5.0
    restart: unless-stopped
    command: mongod --auth
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${NUGC_MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${NUGC_MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=${NUGC_MONGODB_NAME}
      - MONGODB_DATA_DIR=/data/db
      - MONDODB_LOG_DIR=/dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/${NUGC_MONGODB_NAME} --quiet || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s

  redis:
    image: redis/redis-stack-server:7.0.0-RC5
    healthcheck:
      test: redis-cli -p 6379 ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5

  traefik:
    image: traefik:v2.7
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.ugc.address=:80"
      - "--entrypoints.auth.address=:81"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingParam=0"
      - "--tracing.jaeger.traceContextHeaderName=X-Request-Id"
    ports:
      - "8009:81"
      - "8010:80"
      - "8083:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      server:
        condition: service_started
      server-auth:
        condition: service_healthy

  server-auth:
    restart: always
    platform: linux/amd64
    image: yandexmiddleteamv1/netflix-auth-api:latest
    env_file:
      - $ENV
    depends_on:
      db-auth:
        condition: service_healthy
      redis-auth:
        condition: service_healthy
    healthcheck:
      test: exit 0
      interval: 7s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth_api.rule=Host(`api-auth.localhost`,`traefik`)"
      - "traefik.http.routers.auth_api.entrypoints=auth"

  redis-auth:
    image: redis:7.0-alpine
    healthcheck:
      test: redis-cli -p 6379 ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5

  db-auth:
    image: postgres:14.2-alpine
    environment:
      - POSTGRES_USER=${NAA_DB_USER}
      - POSTGRES_PASSWORD=${NAA_DB_PASSWORD}
      - POSTGRES_DB=${NAA_DB_NAME}
    healthcheck:
      test: pg_isready -d $NAA_DB_NAME -U $NAA_DB_USER
      interval: 5s
      timeout: 5s
      retries: 5

  test:
    restart: on-failure
    image: ugc-api-codereview
    env_file:
      - $ENV
    environment:
      - REDIS_OM_URL=${NUGC_REDIS_OM_URL}
    volumes:
      - ./../../src:/app/src
      - ./../../tests:/app/tests
      - .:/app/tests/functional
    command: >
      sh -c "cd /app
      && python -m pytest tests/functional
      "
    depends_on:
      traefik:
        condition: service_started
      server:
        condition: service_started
      redis:
        condition: service_started
      mongodb:
        condition: service_healthy
      server-auth:
        condition: service_healthy
      db-auth:
        condition: service_healthy
      redis-auth:
        condition: service_healthy
