name: Main workflow

on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Cache dependencies
        id: cache-lint
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.lint.txt') }}
          restore-keys: ${{ env.pythonLocation }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lint.txt
      - name: Run linters
        run: make lint

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis/redis-stack-server:7.0.0-RC5
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: codereview
          MONGO_INITDB_DATABASE: ugc_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Cache dependencies
        id: cache-test
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements.test.txt') }}
          restore-keys: ${{ env.pythonLocation }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt -r requirements/requirements.test.txt
      - name: Run tests
        run: |
          export PYTHONUNBUFFERED=1
          export NUGC_DEBUG=1
          export NUGC_PROJECT_BASE_URL=http://api-ugc.localhost:8010
          export NUGC_SERVER_PORT=8003
          export NUGC_PROJECT_NAME=netflix-ugc
          export NUGC_API_V1_STR=/api/v1
          export NUGC_SERVER_HOSTS=http://api-ugc.localhost:8010
          export NAA_SECRET_KEY=secret
          export NUGC_REDIS_HOST=redis
          export NUGC_REDIS_PORT=6379
          export NUGC_REDIS_MAIN_DB=0
          export NUGC_REDIS_OM_URL=redis://@localhost:6379
          export REDIS_OM_URL=redis://@localhost:6379
          export NUGC_REDIS_DEFAULT_CHARSET=utf-8
          export NUGC_REDIS_DECODE_RESPONSES=1
          export NUGC_REDIS_RETRY_ON_TIMEOUT=1
          export NUGC_MONGODB_USER=test
          export NUGC_MONGODB_PASSWORD=codereview
          export NUGC_MONGODB_NAME=ugc_test
          export NUGC_MONGODB_HOST=localhost
          export NUGC_MONGODB_PORT=27017
          export NUGC_MONGOEXPRESS_LOGIN=admin
          export NUGC_MONGOEXPRESS_PASSWORD=pass
          export NUGC_QUEUE_PROGRESS_NAME=progress-topic
          export NUGC_QUEUE_PROGRESS_GROUP=progress-group
          export NUGC_QUEUE_PROGRESS_CONSUMERS=2
          export NUGC_QUEUE_BOOKMARKS_GROUP=bookmarks-group
          export NUGC_QUEUE_BOOKMARKS_CONSUMERS=2
          export NUGC_QUEUE_BOOKMARKS_NAME=bookmarks-topic
          export NUGC_QUEUE_FILM_RATING_NAME=film-rating-topic
          export NUGC_QUEUE_FILM_RATING_GROUP=film-rating-group
          export NUGC_FILM_RATING_CONSUMERS=2
          export NUGC_KAFKA_URL=kafka:9092
          export NUGC_USE_STUBS=1
          export NUGC_CI=1
          export NUGC_TESTING=1
          export PYTEST_ADDOPTS="--ignore-glob=tests/functional/*"
          make test

  build-and-push-image:
    needs: [ lint, test ]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - context: .
            dockerfile: ./dev.Dockerfile
            image: yandexmiddleteamv1/netflix-ugc
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ matrix.image }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}, ${{ matrix.image }}:latest
          labels: ${{ steps.meta.outputs.labels }}

  send-tg-message:
    needs: [ build-and-push-image ]
    runs-on: ubuntu-latest
    steps:
      - uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          state: all
      - name: Send telegram message on successful builds
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }}, build succeeded!:

            Repository: ${{ github.repository }}

            See changes: https://github.com/${{ github.repository }}/pull/${{ steps.findPr.outputs.pr }}
